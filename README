gcb (Garena Client Broadcast) 0d
--------------------------------

gcb is meant to be used to broadcast games from a Warcraft III game host (GHost++ or Warcraft III)
    to other clients, and facilitate connections between the host and these clients.

Hopefully it will be ported to C++ and implemented directly with GHost++,
    so that relaying packets from GHost++ to gcb will not be necessary.

gcb_bot is an example chat bot for Garena. See README_BOT for details.

The source code for both gcb and gcb_bot are in the same package.
gcb_bot will only be used if the key "gcb_bot" is set to true in the configuration file.

Requirements
------------

JRE >= 5.0.
bouncycastle library for RSA
MySQL Connector/J
Apache Commons Configuration

bouncycastle can be downloaded at http://www.bouncycastle.org/latest_releases.html
    The specific JAR file you need is "bcprov-jdk15-146.jar".
MySQL Connector/J can be downloaded at http://www.mysql.com/downloads/connector/j/
Apache Commons Configuration can be downloaded at http://commons.apache.org/configuration/

Before running, you need to install the Java(TM) Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files 6.
This can be downloaded at https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=jce_policy-6-oth-JPR@CDS-CDS_Developer
The download will include installation instructions that you should follow.

Installation
------------

Installation only consists of unzipping the ZIP file.
The latest version may be downloaded from http://code.google.com/p/gcb/

Configuration
-------------

Currently, configuration values can be specified in gcb.cfg.
See that file, bin/gcb.cfg, for details.

To set "gcb_roomid" and "gcb_roomhost", either follow these instructions or skip to the "ID from RoomEN.dat" section:

    Open rooms.txt in a text file, and search for the room name you are looking for.
        (for example: USA DotA Room 01)
    Then, write the id for "gcb_roomid" and the server for "gcb_roomhost".

Running
-------

Just run the JAR file under JVM and everything should work.

Port 6112 UDP must be available, because gcb listens for Warcraft III game broadcasts on that port.
Port 1513 UDP must be available, because gcb sends and receives GP2PP messages on that port.
Thus, you can only run one instance of gcb on a machine.

The configuration file to use (default is gcb.cfg) can be passed as a command line argument.
This allows you to run multiple instances of gcb from one directory.

With default gcb.cfg:
java -jar gcb.jar

With mygcb.cfg:
java -jar gcb.jar mygcb.cfg

gkey.pem contains the private RSA key that all Garena clients use.
Note that this means Garena's encryption can easily be broken, and the password hash can be retrieved.

Compiling
---------

To compile gcb, you need JDK >= 5.0.
Run something similar to:
    javac -classpath "src/:bin/lib/" src/gcb/Main.java

Note that on Windows, ':' should be replaced by ';'.

-----------------------------------------------

ID from RoomEN.dat
------------------
RoomEN.dat in your Garena installation is actually an sqlite database.
This can be opened with an sqlite client, such as:
    Firefox SQLite Manager, available at https://addons.mozilla.org/en-US/firefox/addon/sqlite-manager/

To retrieve the ID, you can either manually use an sqlite client, or you can use gcb_list.
Instruction for gcb_list are available at gcb_list/README. To manually retrieve:

    The Room ID and Server ID can be found by searching the table named "RoomTab". For example:
        SELECT RoomID, ServerId FROM RoomTab WHERE RoomName=' WC3 ROC USA Room'
        
        Note the space preceeding the room name.

    The Room ID should be recorded as "gcb_roomid".

    To find the Room IP address, execute:
        SELECT IP FROM RoomServerTab WHERE ServerId=<server_id>
        
        where <server_id> is the Server ID you found earlier.

    The IP address is stored as an integer.
    It can be converted into an actual address:
        it is the integer representation of the IP address stored in little endian.
        
    This tool may help you: http://www.silisoftware.com/tools/ipconverter.php
        Type the integer in for "Integer IP".
        You will receive the four parts under "Decimal IP".
        Reverse these parts (1.2.3.4 -> 4.3.2.1) to retrieve the original IP address.
        Set "gcb_roomhost" to the original IP address.

Protocol
--------

Much of the code is based off of the included garena_protocol.txt.
This was not created by me, and was essential to the creation of this client.

Note that some details inside the text file are outdated.
For example:

version identifier is currently: 0x0000027C
GSP session login packet is a bit different
    A byte with value 1 precedes the internal IP address
    There's two bytes after the internal IP address, I don't know what they are for

There may be other differences. See gcb source code for more information.
